//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/SpaceCombatKit/UniversalVehicleCombat/InputSystem/LoadoutInputAsset.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @LoadoutInputAsset: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @LoadoutInputAsset()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""LoadoutInputAsset"",
    ""maps"": [
        {
            ""name"": ""Loadout Controls"",
            ""id"": ""bb585eb7-c211-4d88-bb77-1af054e5dd2c"",
            ""actions"": [
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""1f743bad-b2bd-4354-ad7b-f5b1dea07abb"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LookEngage"",
                    ""type"": ""Button"",
                    ""id"": ""788cab80-cb46-4320-bb7f-3fdd5ab18eba"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fce23e03-6281-4d1d-bc20-04bbf7e068b6"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseKeyboard"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""344ddf4e-8494-46aa-88cd-793dc21fcccd"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseKeyboard"",
                    ""action"": ""LookEngage"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""MouseKeyboard"",
            ""bindingGroup"": ""MouseKeyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Loadout Controls
        m_LoadoutControls = asset.FindActionMap("Loadout Controls", throwIfNotFound: true);
        m_LoadoutControls_Look = m_LoadoutControls.FindAction("Look", throwIfNotFound: true);
        m_LoadoutControls_LookEngage = m_LoadoutControls.FindAction("LookEngage", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Loadout Controls
    private readonly InputActionMap m_LoadoutControls;
    private List<ILoadoutControlsActions> m_LoadoutControlsActionsCallbackInterfaces = new List<ILoadoutControlsActions>();
    private readonly InputAction m_LoadoutControls_Look;
    private readonly InputAction m_LoadoutControls_LookEngage;
    public struct LoadoutControlsActions
    {
        private @LoadoutInputAsset m_Wrapper;
        public LoadoutControlsActions(@LoadoutInputAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @Look => m_Wrapper.m_LoadoutControls_Look;
        public InputAction @LookEngage => m_Wrapper.m_LoadoutControls_LookEngage;
        public InputActionMap Get() { return m_Wrapper.m_LoadoutControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LoadoutControlsActions set) { return set.Get(); }
        public void AddCallbacks(ILoadoutControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_LoadoutControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LoadoutControlsActionsCallbackInterfaces.Add(instance);
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @LookEngage.started += instance.OnLookEngage;
            @LookEngage.performed += instance.OnLookEngage;
            @LookEngage.canceled += instance.OnLookEngage;
        }

        private void UnregisterCallbacks(ILoadoutControlsActions instance)
        {
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @LookEngage.started -= instance.OnLookEngage;
            @LookEngage.performed -= instance.OnLookEngage;
            @LookEngage.canceled -= instance.OnLookEngage;
        }

        public void RemoveCallbacks(ILoadoutControlsActions instance)
        {
            if (m_Wrapper.m_LoadoutControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ILoadoutControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_LoadoutControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LoadoutControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public LoadoutControlsActions @LoadoutControls => new LoadoutControlsActions(this);
    private int m_MouseKeyboardSchemeIndex = -1;
    public InputControlScheme MouseKeyboardScheme
    {
        get
        {
            if (m_MouseKeyboardSchemeIndex == -1) m_MouseKeyboardSchemeIndex = asset.FindControlSchemeIndex("MouseKeyboard");
            return asset.controlSchemes[m_MouseKeyboardSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface ILoadoutControlsActions
    {
        void OnLook(InputAction.CallbackContext context);
        void OnLookEngage(InputAction.CallbackContext context);
    }
}
